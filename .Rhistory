combos_string = function(input_list) {
return (list_to_string(combos(input_list)))
}
string_split = function(input_string) {
return(strsplit(input_string, ""))
}
fact = function(n) {
if (n < 2) {
return (1)
}
total = 1
for (i in 1:n) {
total = total * i
}
return (total)
}
perm = function(n, k) {
if (k == 0) {
return (1)
}
if (k == 1) {
return (n)
}
return (fact(n) / fact(n - k))
}
comb = function(n, k) {
if (k == 0) {
return (1)
}
if (k == 1) {
return (n)
}
return (fact(n) / (fact(k) * fact(n - k)))
}
special_comb = function(a, b, a_min, pick) {
sum = 0
for (i in a_min:pick) {
sum = sum + (comb(a, i) * comb(c, pick - i))
}
return(sum)
}
incident = .009
false_positive = .09
accuracy = .94
incident_and_positive = incident * accuracy
positive = incident * accuracy + false_positive * (1 - incident))
combos = function(input_list) {
if (length(input_list) == 0) {
return("") # Handle empty input
}
result = input_list[[1]]
for (i in 2:length(input_list)) {
a = expand.grid(result, input_list[[i]])
result = apply(a, 1, function(row) {
paste(row, collapse = "")
})
}
return(result)
}
list_to_string = function(input_list) {
return (paste(input_list, collapse = ","))
}
combos_string = function(input_list) {
return (list_to_string(combos(input_list)))
}
string_split = function(input_string) {
return(strsplit(input_string, ""))
}
fact = function(n) {
if (n < 2) {
return (1)
}
total = 1
for (i in 1:n) {
total = total * i
}
return (total)
}
perm = function(n, k) {
if (k == 0) {
return (1)
}
if (k == 1) {
return (n)
}
return (fact(n) / fact(n - k))
}
comb = function(n, k) {
if (k == 0) {
return (1)
}
if (k == 1) {
return (n)
}
return (fact(n) / (fact(k) * fact(n - k)))
}
special_comb = function(a, b, a_min, pick) {
sum = 0
for (i in a_min:pick) {
sum = sum + (comb(a, i) * comb(c, pick - i))
}
return(sum)
}
incident = .009
false_positive = .09
accuracy = .94
incident_and_positive = incident * accuracy
positive = incident * accuracy + false_positive * (1 - incident)
incident_and_positive / positive
combos = function(input_list) {
if (length(input_list) == 0) {
return("") # Handle empty input
}
result = input_list[[1]]
for (i in 2:length(input_list)) {
a = expand.grid(result, input_list[[i]])
result = apply(a, 1, function(row) {
paste(row, collapse = "")
})
}
return(result)
}
list_to_string = function(input_list) {
return (paste(input_list, collapse = ","))
}
combos_string = function(input_list) {
return (list_to_string(combos(input_list)))
}
string_split = function(input_string) {
return(strsplit(input_string, ""))
}
fact = function(n) {
if (n < 2) {
return (1)
}
total = 1
for (i in 1:n) {
total = total * i
}
return (total)
}
perm = function(n, k) {
if (k == 0) {
return (1)
}
if (k == 1) {
return (n)
}
return (fact(n) / fact(n - k))
}
comb = function(n, k) {
if (k == 0) {
return (1)
}
if (k == 1) {
return (n)
}
return (fact(n) / (fact(k) * fact(n - k)))
}
special_comb = function(a, b, a_min, pick) {
sum = 0
for (i in a_min:pick) {
sum = sum + (comb(a, i) * comb(c, pick - i))
}
return(sum)
}
# incident = .009
# false_positive = .09
# accuracy = .94
#
# incident_and_positive = incident * accuracy
# positive = incident * accuracy + false_positive * (1 - incident)
# incident_and_positive / positive
failed_online = 1/20
failed_person = 2/25
online = .22
person = 1 - online
online_and_failed = failed_online * online
failed = failed_online * online + failed_person * person
online_given_failed = online_and_failed / failed
combos = function(input_list) {
if (length(input_list) == 0) {
return("") # Handle empty input
}
result = input_list[[1]]
for (i in 2:length(input_list)) {
a = expand.grid(result, input_list[[i]])
result = apply(a, 1, function(row) {
paste(row, collapse = "")
})
}
return(result)
}
list_to_string = function(input_list) {
return (paste(input_list, collapse = ","))
}
combos_string = function(input_list) {
return (list_to_string(combos(input_list)))
}
string_split = function(input_string) {
return(strsplit(input_string, ""))
}
fact = function(n) {
if (n < 2) {
return (1)
}
total = 1
for (i in 1:n) {
total = total * i
}
return (total)
}
perm = function(n, k) {
if (k == 0) {
return (1)
}
if (k == 1) {
return (n)
}
return (fact(n) / fact(n - k))
}
comb = function(n, k) {
if (k == 0) {
return (1)
}
if (k == 1) {
return (n)
}
return (fact(n) / (fact(k) * fact(n - k)))
}
special_comb = function(a, b, a_min, pick) {
sum = 0
for (i in a_min:pick) {
sum = sum + (comb(a, i) * comb(c, pick - i))
}
return(sum)
}
# incident = .009
# false_positive = .09
# accuracy = .94
#
# incident_and_positive = incident * accuracy
# positive = incident * accuracy + false_positive * (1 - incident)
# incident_and_positive / positive
failed_online = 1/20
failed_person = 2/25
online = .22
person = 1 - online
online_and_failed = failed_online * online
failed = failed_online * online + failed_person * person
online_given_failed = online_and_failed / failed
online_given_failed
combos = function(input_list) {
if (length(input_list) == 0) {
return("") # Handle empty input
}
result = input_list[[1]]
for (i in 2:length(input_list)) {
a = expand.grid(result, input_list[[i]])
result = apply(a, 1, function(row) {
paste(row, collapse = "")
})
}
return(result)
}
list_to_string = function(input_list) {
return (paste(input_list, collapse = ","))
}
combos_string = function(input_list) {
return (list_to_string(combos(input_list)))
}
string_split = function(input_string) {
return(strsplit(input_string, ""))
}
fact = function(n) {
if (n < 2) {
return (1)
}
total = 1
for (i in 1:n) {
total = total * i
}
return (total)
}
perm = function(n, k) {
if (k == 0) {
return (1)
}
if (k == 1) {
return (n)
}
return (fact(n) / fact(n - k))
}
comb = function(n, k) {
if (k == 0) {
return (1)
}
if (k == 1) {
return (n)
}
return (fact(n) / (fact(k) * fact(n - k)))
}
special_comb = function(a, b, a_min, pick) {
sum = 0
for (i in a_min:pick) {
sum = sum + (comb(a, i) * comb(c, pick - i))
}
return(sum)
}
# incident = .009
# false_positive = .09
# accuracy = .94
#
# incident_and_positive = incident * accuracy
# positive = incident * accuracy + false_positive * (1 - incident)
# incident_and_positive / positive
failed_online = 1/10
failed_person = 3/25
online = .11
person = 1 - online
online_and_failed = failed_online * online
failed = failed_online * online + failed_person * person
online_given_failed = online_and_failed / failed
online_given_failed
combos = function(input_list) {
if (length(input_list) == 0) {
return("") # Handle empty input
}
result = input_list[[1]]
for (i in 2:length(input_list)) {
a = expand.grid(result, input_list[[i]])
result = apply(a, 1, function(row) {
paste(row, collapse = "")
})
}
return(result)
}
list_to_string = function(input_list) {
return (paste(input_list, collapse = ","))
}
combos_string = function(input_list) {
return (list_to_string(combos(input_list)))
}
string_split = function(input_string) {
return(strsplit(input_string, ""))
}
fact = function(n) {
if (n < 2) {
return (1)
}
total = 1
for (i in 1:n) {
total = total * i
}
return (total)
}
perm = function(n, k) {
if (k == 0) {
return (1)
}
if (k == 1) {
return (n)
}
return (fact(n) / fact(n - k))
}
comb = function(n, k) {
if (k == 0) {
return (1)
}
if (k == 1) {
return (n)
}
return (fact(n) / (fact(k) * fact(n - k)))
}
special_comb = function(a, b, a_min, pick) {
sum = 0
for (i in a_min:pick) {
sum = sum + (comb(a, i) * comb(c, pick - i))
}
return(sum)
}
# incident = .009
# false_positive = .09
# accuracy = .94
#
# incident_and_positive = incident * accuracy
# positive = incident * accuracy + false_positive * (1 - incident)
# incident_and_positive / positive
failed_online = 1/10
failed_person = 3/25
online = .11
person = 1 - online
online_and_failed = failed_online * online
failed = failed_online * online + failed_person * person
online_given_failed = online_and_failed / failed
online_given_failed
rep = .31
dem = .48
ind = .21
rep_favor = .24
dem_favor = .58
ind_favor = .18
favor = rep * rep_favor + dem * dem_favor + ind * ind_favor
dem_and_favor = dem * dem_favor
dem_given_favor = dem_and_favor / favor
combos = function(input_list) {
if (length(input_list) == 0) {
return("") # Handle empty input
}
result = input_list[[1]]
for (i in 2:length(input_list)) {
a = expand.grid(result, input_list[[i]])
result = apply(a, 1, function(row) {
paste(row, collapse = "")
})
}
return(result)
}
list_to_string = function(input_list) {
return (paste(input_list, collapse = ","))
}
combos_string = function(input_list) {
return (list_to_string(combos(input_list)))
}
string_split = function(input_string) {
return(strsplit(input_string, ""))
}
fact = function(n) {
if (n < 2) {
return (1)
}
total = 1
for (i in 1:n) {
total = total * i
}
return (total)
}
perm = function(n, k) {
if (k == 0) {
return (1)
}
if (k == 1) {
return (n)
}
return (fact(n) / fact(n - k))
}
comb = function(n, k) {
if (k == 0) {
return (1)
}
if (k == 1) {
return (n)
}
return (fact(n) / (fact(k) * fact(n - k)))
}
special_comb = function(a, b, a_min, pick) {
sum = 0
for (i in a_min:pick) {
sum = sum + (comb(a, i) * comb(c, pick - i))
}
return(sum)
}
# incident = .009
# false_positive = .09
# accuracy = .94
#
# incident_and_positive = incident * accuracy
# positive = incident * accuracy + false_positive * (1 - incident)
# incident_and_positive / positive
failed_online = 1/10
failed_person = 3/25
online = .11
person = 1 - online
online_and_failed = failed_online * online
failed = failed_online * online + failed_person * person
online_given_failed = online_and_failed / failed
online_given_failed
rep = .31
dem = .48
ind = .21
rep_favor = .24
dem_favor = .58
ind_favor = .18
favor = rep * rep_favor + dem * dem_favor + ind * ind_favor
dem_and_favor = dem * dem_favor
dem_given_favor = dem_and_favor / favor
dem_given_favor
defective = .10
non_defective = 1 - defective
defective_inspect = .60
non_defective_inspect = .20
defective_and_inspect = defective * defective_inspect
inspect = defective * defective_inspect + non_defective * non_defective_inspect
defective_given_inspect = defective_and_inspect / inspect
defective = .10
non_defective = 1 - defective
defective_inspect = .60
non_defective_inspect = .20
defective_and_inspect = defective * defective_inspect
inspect = defective * defective_inspect + non_defective * non_defective_inspect
defective_given_inspect = defective_and_inspect / inspect
defective_given_inspect
rep = .20
dem = .65
ind = .15
rep_favor = .14
dem_favor = .60
ind_favor = .26
favor = rep * rep_favor + dem * dem_favor + ind * ind_favor
dem_and_favor = dem * dem_favor
dem_given_favor = dem_and_favor / favor
dem_given_favor
